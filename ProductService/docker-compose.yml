version: '3.3'
services:
  mysql_database:
    image: mysql:8.0.28
    restart: always
    networks:
      - product-service
    environment:
      MYSQL_DATABASE: 'productivity'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'mysql'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'mysql'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'mysql'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3305:3305'
    expose:
      # Opens port 3306 on the container
      - '3305'
      # Where our data will be persisted

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - product-service

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
        - KAFKA_BROKER_ID=1
        - KAFKA_CFG_LISTENERS=PLAINTEXT://localhost:9092
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CREATE_TOPICS=logs
    networks:
      - product-service
#
#  kong-database:
#    image: postgres:9.6
#    container_name: kong-postgres
#    restart: on-failure
#    networks:
#      - product-service
#    volumes:
#      - kong_data:/var/lib/postgresql/data
#    environment:
#      POSTGRES_USER: kong
#      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#      POSTGRES_DB: kong
#    ports:
#      - "5432:5432"
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "kong" ]
#      interval: 30s
#      timeout: 30s
#      retries: 3
#
#  #######################################
#  # Kong database migration
#  #######################################
#  kong-migration:
#    image: ${KONG_DOCKER_TAG:-kong:latest}
#    command: kong migrations bootstrap
#    networks:
#      - product-service
#    restart: on-failure
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_DATABASE: kong
#      KONG_PG_USER: kong
#      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#    depends_on:
#      - kong-database
#
#  #######################################
#  # Kong: The API Gateway
#  #######################################
#  kong:
#    image: ${KONG_DOCKER_TAG:-kong:latest}
#    restart: on-failure
#    networks:
#      - product-service
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_DATABASE: kong
#      KONG_PG_USER: kong
#      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#      KONG_PROXY_LISTEN: 0.0.0.0:8000
#      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#    depends_on:
#      - kong-database
#    healthcheck:
#      test: [ "CMD", "kong", "health" ]
#      interval: 10s
#      timeout: 10s
#      retries: 10
#    ports:
#      - "8000:8000"
#      - "8001:8001"
#      - "8443:8443"
#      - "8444:8444"
#
#  #######################################
#  # Konga database prepare
#  #######################################
#  konga-prepare:
#    image: pantsel/konga:latest
#    command: "-c prepare -a postgres -u postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
#    networks:
#      - product-service
#    restart: on-failure
#    depends_on:
#      - kong-database
#
#  #######################################
#  # Konga: Kong GUI
#  #######################################
#  konga:
#    image: pantsel/konga:latest
#    restart: always
#    networks:
#      - product-service
#    environment:
#      DB_ADAPTER: postgres
#      DB_URI: postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga
#      NODE_ENV: production
#    depends_on:
#      - kong-database
#    ports:
#      - "1337:1337"

  product:
    image: product
    ports:
      - "8084:8084"
    networks:
      - product-service
    restart: on-failure
    depends_on:
      - mysql_database
      - zookeeper
      - kafka
    expose:
      - '8084'

  Logger:
    image: logger
    ports:
      - "8089:8089"
    networks:
      - product-service
    restart: on-failure
    depends_on:
      - mysql_database
      - zookeeper
      - kafka
    expose:
      - '8089'

  Kong:
    image: kong
    ports:
      - "8080:8080"
    networks:
      - product-service
    restart: on-failure
    expose:
      - '8080'

  CartServer:
    image: cartservice
    ports:
      - "8082:8082"
    networks:
      - product-service
    restart: on-failure
    expose:
      - '8082'

  CartClient:
    image: cartclient
    ports:
      - "8081:8081"
    networks:
      - product-service
    restart: on-failure
    expose:
      - '8081'

networks:
  product-service: